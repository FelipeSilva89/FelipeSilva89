# 🧪 Apache JMeter

## O que é?
O **Apache JMeter** é uma ferramenta open-source desenvolvida pela Apache Foundation para **testes de carga, desempenho e stress** em sistemas.  
Ele simula múltiplos usuários acessando uma aplicação, permitindo verificar a performance sob diferentes condições.

---

## Para que serve?
- **Testes de Performance**: Avaliar tempo de resposta, throughput e latência.  
- **Testes de Carga**: Medir como o sistema se comporta com um grande número de usuários simultâneos.  
- **Testes de Stress**: Descobrir o ponto de falha ou gargalo do sistema.  
- **Testes de API**: Validar endpoints REST ou SOAP sob carga.  
- **Simulação de cenários reais**: Reproduzir fluxo de navegação ou operações em massa.

---

## Por que usar o JMeter e não outra ferramenta?
✅ **Open Source** – gratuito e com comunidade ativa.  
✅ **Amplo suporte** – APIs, aplicações web, banco de dados, FTP, etc.  
✅ **Interface gráfica (GUI)** – facilita a criação e visualização de cenários.  
✅ **Extensível** – permite adicionar plugins ou até scripts (ex.: BeanShell, Groovy).  
✅ **Integração com CI/CD** – funciona bem em pipelines de automação.  

⚠️ **Ponto de atenção**:  
- Pode ser mais pesado que alternativas modernas como o **k6** (que é mais leve e usa JavaScript).  
- A curva de aprendizado da interface pode ser maior.

---

## Como funciona?
1. **Test Plan (Plano de Teste)** – Estrutura principal do cenário.  
2. **Thread Group (Grupo de Usuários)** – Define quantos usuários virtuais serão simulados.  
3. **Samplers (Amostras)** – São as requisições que os usuários vão executar (HTTP, JDBC, FTP etc).  
4. **Listeners (Relatórios)** – Coletam e exibem os resultados dos testes (gráficos, tabelas, logs).  
5. **Config Elements** – Parametrizam os testes (ex.: URL base, cabeçalhos de requisição).  

Fluxo básico:  
👉 Definir plano → Configurar usuários → Simular requisições → Analisar métricas.

---

## Exemplos práticos

### 🔹 Exemplo 1 – Teste simples de API
- Criar um **Thread Group** com 50 usuários.  
- Adicionar um **HTTP Request** para `https://meu-sistema.com/api/login`.  
- Incluir um **Listener** “View Results Tree” para verificar cada resposta.  

Resultado esperado: medir tempo médio de resposta do login.

---

### 🔹 Exemplo 2 – Teste de carga em uma página
- 200 usuários simultâneos acessando `https://meu-site.com/home`.  
- Repetir 10 vezes (loop).  
- Analisar relatórios de **Throughput** e **Tempo de resposta médio**.  

---

### 🔹 Exemplo 3 – Fluxo de usuário
- Usuário acessa `/login`, faz login, navega em `/produtos` e adiciona um item ao carrinho.  
- Cada etapa é um **HTTP Sampler** no JMeter.  
- Pode-se adicionar **Timers** para simular o tempo humano de navegação.  

---

## 📊 Métricas que o JMeter ajuda a coletar
- **Tempo de resposta (Response Time)**  
- **Throughput (Requisições por segundo)**  
- **Erros (%)**  
- **Tempo médio, mínimo e máximo por requisição**  
- **Capacidade máxima do sistema antes de falhar**  

---

## 📌 Observação final
O JMeter é uma ferramenta **clássica e robusta** para testes de performance, muito usada no mercado.  
Se o objetivo é praticar e aprender fundamentos de testes de carga, é um ótimo ponto de partida.  
Para cenários mais modernos e com foco em automação leve, o **k6** pode ser considerado como alternativa.
